using System.Collections;
using UnityEngine;
public class StartRoundSystem : MonoBehaviour
{
    [SerializeField] QuestLevel questLevel;
    [SerializeField] SetQuestSystem setQuestSystem;
    [SerializeField] TextManager textManager;
    [SerializeField] LogicQuestSystem logicQuestSystem;
    [SerializeField] CompareSystem compareSystem;
    [SerializeField] int currentRound;
    public int _CurrentRound { get => currentRound; set => currentRound = value; }
    void Awake()
    {
        questLevel = FindObjectOfType<QuestLevel>();
        setQuestSystem = FindObjectOfType<SetQuestSystem>();
        compareSystem = FindObjectOfType<CompareSystem>();
        logicQuestSystem = FindObjectOfType<LogicQuestSystem>();
    }
    void Start()
    {
        currentRound = 1;
        StartQuest(9.5f, 1f, 1f, 3.5f);
    }
    public void StartQuest(float _timeToCompare, float _timeNotSelect1, float _timeNotSelect2, float sgTimer)
    {
        setQuestSystem.SetCase(0/*questLevel.CaseValue*/);
        logicQuestSystem.ResetUCS();
        StartCoroutine(IERoundTime(sgTimer));
        compareSystem._idBtnSelect = 3;
        StartCoroutine(IEStartQuest(_timeNotSelect1, _timeNotSelect2));
        compareSystem.TimeToCompare(_timeToCompare);
    }
    public IEnumerator IEStartQuest(float _timerIESQInit, float _timerIESQEnd)
    {
        yield return new WaitForSeconds(_timerIESQInit);
        textManager.ShowText(0, "Round " + currentRound, "txtShow");
        yield return new WaitForSeconds(_timerIESQEnd);
    }
    IEnumerator IERoundTime(float _sgTimer)
    {
        yield return new WaitForSeconds(_sgTimer);
        compareSystem._startGame = true;
    }
}

using System.Collections;
using UnityEngine;
using UnityEngine.SceneManagement;
public class CompareSystem : MonoBehaviour
{
    [SerializeField] SetQuestSystem setQuestSystem;
    [SerializeField] StartRoundSystem startRoundSystem;
    [SerializeField] TimerManager timerManager;
    [SerializeField] TextManager textManager;
    [SerializeField] protected internal GameObject timerContent, questContent, cardContent;
    [SerializeField] int score, idBtnSelect;
    [SerializeField] bool gameFinished, startGame;
    public bool _startGame { get => startGame; set => startGame = value; }
    public int _idBtnSelect { get => idBtnSelect; set => idBtnSelect = value; }
    public bool _gameFinished { get => gameFinished; set => gameFinished = value; }
    void Awake()
    {
        startRoundSystem = FindObjectOfType<StartRoundSystem>();
        setQuestSystem = FindObjectOfType<SetQuestSystem>();
        textManager = FindObjectOfType<TextManager>();
        timerManager = FindObjectOfType<TimerManager>();
    }
    void Start()
    {
        SetContainers(true);
        score = 0;
        idBtnSelect = 3;
        gameFinished = false;
    }
    public void TimeToCompare(float _timeAdd)
    {
        StartCoroutine(IETimeToCompare(_timeAdd));
    }
    IEnumerator IETimeToCompare(float _timeAdd)
    {
        yield return new WaitForSeconds(_timeAdd);
        CompareCards(setQuestSystem._myRandom);
    }
    void CompareCards(int _idquest)
    {
        startGame = false;
        gameFinished = true;
        startRoundSystem._CurrentRound++;
        if (idBtnSelect == setQuestSystem._idQuest[_idquest] && idBtnSelect != 3)
        {
            StartCoroutine(WinOrLoseMethod(0, "Correcto!"));
        }
        else
        {
            StartCoroutine(WinOrLoseMethod(1, "Incorrecto!"));
        }
    }
    IEnumerator WinOrLoseMethod(int _scoreType, string _text)
    {
        switch (_scoreType)
        {
            case 0: score++; break;
            case 1: score--; break;
        }
        textManager.ShowText(1, _text, "txtShow");
        yield return new WaitForSeconds(2f);
        ResetGame(false, null, null, 3f, 9.5f);
        yield return new WaitForSeconds(1f);
        if (startRoundSystem._CurrentRound > 5)
        {
            yield return new WaitForSeconds(2f);
            if (score > 2)
            {
                textManager.ShowText(1, "Has ganado el juego!", "txtShow");
                yield return new WaitForSeconds(2f);
                textManager.ShowText(1, "Puntaje: " + score, "txtShow");
                yield return new WaitForSeconds(2f);
                SceneManager.LoadScene(2);
            }
            else
            {
                SetContainers(false);
                textManager.ShowText(1, "Has perdido!", "txtRoundShow");
                yield return new WaitForSeconds(2f);
                textManager.ShowText(1, "Puntaje: " + score, "txtShow");
                yield return new WaitForSeconds(1f);
                ResetGame(false, 1, 0, 3f, 9.5f);
            }
        }
    }
    public void ResetGame(bool _GF, int? _CR, int? _S, float _IERV, float _SQ)
    {
        gameFinished = _GF;
        startRoundSystem._CurrentRound = _CR ?? startRoundSystem._CurrentRound;
        score = _S ?? score;
        StartCoroutine(timerManager.IEResetValues(_IERV));
        startRoundSystem.StartQuest(_SQ, 1f, 1f, 3.5f);
        cardContent.SetActive(true);
    }
    public IEnumerator ResetGameForNotSelect(bool _GF, int? _CR, int? _S, float _SQ)
    {
        gameFinished = _GF;
        startRoundSystem._CurrentRound = _CR ?? startRoundSystem._CurrentRound;
        score = _S ?? score;
        startRoundSystem.StartQuest(_SQ, 5f, 5f, 3.5f);
        yield return new WaitForSeconds(2f);
        cardContent.SetActive(true);
    }
    void SetContainers(bool _bool)
    {
        timerContent.SetActive(_bool);
        questContent.SetActive(_bool);
        cardContent.SetActive(_bool);
    }
}

using UnityEngine;
using UnityEngine.UI;
public class SetQuestSystem : MonoBehaviour
{
    [SerializeField] AnswerButtonData[] answerButtonDatas;
    [SerializeField] QuestLevelData questLevelDatas;
    [SerializeField] MouseController mouseController;
    [SerializeField] Text textQuest;
    [SerializeField] Image[] imageItem;
    [SerializeField] Image imageKindom;
    [SerializeField] int random;
    [SerializeField] int[] idButton, idQuest;
    public int _myRandom { get => random; set => random = value; }
    public int[] _idQuest { get => idQuest; set => idQuest = value; }
    void Awake()
    {
        mouseController = FindObjectOfType<MouseController>();
    }
    public void SetCase(int _value)
    {
        random = Random.Range(0, 2);
        Debug.Log("Quest: " + random);
        switch (_value)
        {
            case 0:
                AnimalQuest(random);
                break;
        }
    }
    void AnimalQuest(int value)
    {
        switch (value)
        {
            case 0:
                SetDataCases(0, 0, 0, 0, 1, 2);
                break;
            case 1:
                SetDataCases(1, 1, 0, 0, 2, 3);
                break;
            /*
              case 2:
                  SetDataCases(0, 0, 0, 0, 1, 2, 0, 1, 2);
                  break;
              case 3:
                  SetDataCases(0, 0, 0, 0, 1, 2, 0, 1, 2);
                  break;
              case 4:
                  SetDataCases(0, 0, 0, 0, 1, 2, 0, 1, 2);
                  break;
            */
            default:
                Debug.LogError("Quest error!");
                break;
        }
    }
    void SetDataCases(int _idQuest, int _textQuest, int _imageQuest, int _idImgA1, int _idImgA2, int _idImgA3)
    {
        idQuest[_idQuest] = questLevelDatas.idQuest[_idQuest];
        textQuest.text = questLevelDatas.texQuest[_textQuest];
        imageKindom.sprite = questLevelDatas.imageKindom[_imageQuest];
        idButton[0] = answerButtonDatas[0].idAnswer = 0;
        imageItem[0].sprite = answerButtonDatas[0].imageItem[_idImgA1];
        idButton[1] = answerButtonDatas[1].idAnswer = 1;
        imageItem[1].sprite = answerButtonDatas[1].imageItem[_idImgA2];
        idButton[2] = answerButtonDatas[2].idAnswer = 2;
        imageItem[2].sprite = answerButtonDatas[2].imageItem[_idImgA3];
        mouseController.MouseUnLock();
    }
}

using System.Collections;
using UnityEngine;
using UnityEngine.UI;
public class TimerManager : MonoBehaviour
{
    [SerializeField] AnimationsManager animationsManager;
    [SerializeField] CompareSystem compareSystem;
    [SerializeField] GameObject timerContainer;
    [SerializeField] StartRoundSystem startRoundSystem;
    [SerializeField] Text textTimer;
    [SerializeField] TextManager textManager;
    [SerializeField] Image imgFiller;
    [SerializeField] int fillMax;
    [SerializeField] float timer, currentFill;
    public float Timer { get => timer; set => timer = value; }
    void Awake()
    {
        animationsManager = FindObjectOfType<AnimationsManager>();
        compareSystem = FindObjectOfType<CompareSystem>();
        textManager = FindObjectOfType<TextManager>();
        startRoundSystem = FindObjectOfType<StartRoundSystem>();
    }
    void Start()
    {
        fillMax = 5;
        timer = 5f;
        currentFill = 5f;
    }
    void Update()
    {
        TimerMethod();
        TimerEnd();
        imgFiller.fillAmount = currentFill / fillMax;
    }
    void TimerMethod()
    {
        if (compareSystem._startGame && timer > 0)
        {
            timerContainer.SetActive(true);
            timer -= Time.deltaTime;
            currentFill -= Time.deltaTime;
            float timerRound = Mathf.Round(timer);
            textTimer.text = timerRound.ToString();
            animationsManager.SetTimerAnimation(true);
        }
    }
    void TimerEnd()
    {
        if (timer < 0)
        {
            for (int i = 0; i < animationsManager.btnPressed.Length; i++)
            {
                if (!animationsManager.btnPressed[i] && compareSystem._idBtnSelect == 3 && !compareSystem._startGame)
                {
                    textManager.ShowText(1, "No seleccionaste!", "txtShow");
                    compareSystem.cardContent.SetActive(false);
                    StartCoroutine(IEResetValues(5f));
                    StartCoroutine(compareSystem.ResetGameForNotSelect(false, null, null, 9.5f));
                }
            }
        }
    }
    public IEnumerator IEResetValues(float _timerIERV)
    {
        yield return new WaitForSeconds(_timerIERV);
        timer = 5f;
        currentFill = 5f;
        animationsManager.SetTimerAnimation(false);
    }
}